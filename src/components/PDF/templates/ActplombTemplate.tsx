// ============================================
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –®–ê–ë–õ–û–ù –î–õ–Ø –ê–ö–¢–ê –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø
// ============================================

import jsPDF from 'jspdf';
import { PDFConfig } from '../types';
import { FontLoader } from '../utils/fontLoader';
import { TextUtils } from '../utils/textUtils';

// ============================================
// –¢–ò–ü–´ –î–ê–ù–ù–´–• (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)
// ============================================

export interface PlombMeterData {
    meter_number: string;
    seal_number: string;
    current_reading?: string | number;
    meter_type?: string;
    notes?: string;
    sequence_order?: number;
}

export interface ActPlombData {
    id?: string;
    act_number?: string;
    act_date: string;
    subscriber_name: string;
    address?: string;
    street: string;
    house: string;
    apartment: string;
    usd_representative: string;
    notes?: string;
    invoice_id?: string;
    meters: PlombMeterData[];
    recipient_signature?: string;
    receipt_date?: string;
    created_at?: string;
    updated_at?: string;
}

// ============================================
// –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–ì–û –¢–ï–ö–°–¢–ê
// ============================================

class SafeTextUtils {
    /**
     * –û—á–∏—â–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è PDF
     */
    static cleanText(text: string | undefined | null): string {
        if (!text) return '';
        return String(text)
            .replace(/[^\u0000-\u007F\u0400-\u04FF\u0500-\u052F]/g, '') // –û—Å—Ç–∞–≤–ª—è–µ–º –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
            .trim();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π
     */
    static createUnderline(length: number = 20): string {
        return '_'.repeat(length);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–µ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
     */
    static formatField(value: string | undefined | null, underlineLength: number = 20): string {
        const cleaned = this.cleanText(value);
        return cleaned || this.createUnderline(underlineLength);
    }
}

// ============================================
// –ö–õ–ê–°–° –®–ê–ë–õ–û–ù–ê –ê–ö–¢–ê –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø
// ============================================

export class ActPlombTemplate {
    private doc: jsPDF;
    private config: PDFConfig;
    private currentY: number = 0;
    private pageWidth: number;
    private pageHeight: number;
    private margin: number = 20;

    constructor(doc: jsPDF, config: PDFConfig) {
        this.doc = doc;
        this.config = config;
        this.pageWidth = doc.internal.pageSize.getWidth();
        this.pageHeight = doc.internal.pageSize.getHeight();
    }

    // ============================================
    // –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –†–ï–ù–î–ï–†–ò–ù–ì–ê
    // ============================================

    public renderDocument(data: ActPlombData): void {
        try {
            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–∫—Ç–∞ –ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            this.currentY = this.margin;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            this.setupCyrillicSupport();
            
            // –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            this.renderHeader();
            this.renderCompanyDetails();
            this.renderDocumentTitle(data);
            this.renderMainContent(data);
            this.renderMetersSection(data);
            this.renderSignatures(data);
            
            console.log('‚úÖ –ê–∫—Ç –ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∞ –ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            throw error;
        }
    }

    // ============================================
    // –ù–ê–°–¢–†–û–ô–ö–ê –ö–ò–†–ò–õ–õ–ò–¶–´
    // ============================================

    private setupCyrillicSupport(): void {
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —à—Ä–∏—Ñ—Ç Times —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            this.doc.setFont('times', 'normal');
            this.doc.setFontSize(12);
            this.doc.setTextColor(0, 0, 0);
            
            console.log('‚úÖ –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        } catch (error) {
            console.warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã:', error);
        }
    }

    // ============================================
    // –ë–ï–ó–û–ü–ê–°–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ï–ö–°–¢–ê
    // ============================================

    private addSafeText(text: string, x: number, y: number): void {
        try {
            const safeText = SafeTextUtils.cleanText(text);
            this.doc.text(safeText, x, y);
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:', error, '–¢–µ–∫—Å—Ç:', text);
            // Fallback - –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
            this.doc.text(SafeTextUtils.createUnderline(10), x, y);
        }
    }

    // ============================================
    // –ó–ê–ì–û–õ–û–í–û–ö –° –õ–û–ì–û–¢–ò–ü–û–ú
    // ============================================

    private renderHeader(): void {
        try {
            // –õ–æ–≥–æ—Ç–∏–ø –£–°–î (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
            this.doc.setFont('times', 'bold');
            this.doc.setFontSize(10);
            this.doc.setTextColor(0, 100, 150);
            this.addSafeText('–°–ê–•–ê–¢–†–ê–ù–°–ù–ï–§–¢–ï–ì–ê–ó', this.margin, this.currentY + 8);
            this.addSafeText('–£–°–î', this.margin + 5, this.currentY + 16);
            
            // QR –∫–æ–¥ placeholder (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
            this.doc.setTextColor(0, 0, 0);
            this.doc.rect(this.pageWidth - 35, this.currentY, 15, 15);
            this.doc.setFontSize(8);
            this.addSafeText('QR', this.pageWidth - 30, this.currentY + 8);
            
            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            this.currentY += 25;
            this.doc.line(this.margin, this.currentY, this.pageWidth - this.margin, this.currentY);
            this.currentY += 5;
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞:', error);
        }
    }

    // ============================================
    // –†–ï–ö–í–ò–ó–ò–¢–´ –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò
    // ============================================

    private renderCompanyDetails(): void {
        this.doc.setFont('times', 'normal');
        this.doc.setFontSize(9);
        this.doc.setTextColor(0, 0, 0);
        
        const details = [
            '–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Å–±—ã—Ç–æ–≤–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ¬´–°–∞—Ö–∞—Ç—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç–µ–≥–∞–∑¬ª',
            '–ò–ù–ù 1435142972, –ö–ü–ü 140045003, –û–ì–†–ù 1031402073097',
            '–ê–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π: –≥.–Ø–∫—É—Ç—Å–∫, —É–ª. –ü.–ê–ª–µ–∫—Å–µ–µ–≤–∞, 64–ë, —Ç–µ–ª/—Ñ–∞–∫—Å: 46-00-93, 46-00-41',
            '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –±—É–¥–Ω–∏ —Å 8:00 –¥–æ 17:00, –æ–±–µ–¥ —Å 12:00 –¥–æ 13:00; —Å—É–±–±–æ—Ç–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π'
        ];

        details.forEach(detail => {
            this.addSafeText(detail, this.margin, this.currentY);
            this.currentY += 4.5;
        });

        this.currentY += 10;
    }

    // ============================================
    // –ó–ê–ì–û–õ–û–í–û–ö –î–û–ö–£–ú–ï–ù–¢–ê
    // ============================================

    private renderDocumentTitle(data: ActPlombData): void {
        // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        this.doc.setFont('times', 'bold');
        this.doc.setFontSize(14);
        const title = '–ê–ö–¢ –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø –ü–†–ò–ë–û–†–ê –£–ß–ï–¢–ê –ì–ê–ó–ê';
        const titleWidth = this.doc.getTextWidth(title);
        const titleX = (this.pageWidth - titleWidth) / 2;
        this.addSafeText(title, titleX, this.currentY);
        
        this.currentY += 15;

        // –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        this.doc.setFont('times', 'normal');
        this.doc.setFontSize(12);
        const dateText = this.formatDate(data.act_date);
        const dateWidth = this.doc.getTextWidth(dateText);
        const dateX = this.pageWidth - this.margin - dateWidth;
        this.addSafeText(dateText, dateX, this.currentY);
        
        this.currentY += 20;
    }

    private formatDate(dateString: string): string {
        try {
            if (!dateString) return '–æ—Ç ¬´___¬ª_______________202__–≥.';
            
            const date = new Date(dateString);
            if (isNaN(date.getTime())) return '–æ—Ç ¬´___¬ª_______________202__–≥.';
            
            const months = [
                '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
            ];
            
            const day = date.getDate().toString().padStart(2, '0');
            const month = months[date.getMonth()];
            const year = date.getFullYear().toString().slice(-2);
            
            return `–æ—Ç ¬´${day}¬ª ${month} 20${year}–≥.`;
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
            return '–æ—Ç ¬´___¬ª_______________202__–≥.';
        }
    }

    // ============================================
    // –û–°–ù–û–í–ù–û–ï –°–û–î–ï–†–ñ–ò–ú–û–ï
    // ============================================

    private renderMainContent(data: ActPlombData): void {
        this.doc.setFont('times', 'normal');
        this.doc.setFontSize(12);

        // –§–ò–û –∞–±–æ–Ω–µ–Ω—Ç–∞
        this.renderTextLine('–î–∞–Ω(–∞) –§–ò–û:', SafeTextUtils.formatField(data.subscriber_name, 50));
        
        // –ê–¥—Ä–µ—Å
        const fullAddress = data.address || `${data.street || ''}, ${data.house || ''}, –∫–≤. ${data.apartment || ''}`.trim();
        this.renderTextLine('–ü–æ –∞–¥—Ä–µ—Å—É', SafeTextUtils.formatField(fullAddress, 60));
        
        this.currentY += 10;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –ø—Ä–∏–±–æ—Ä–æ–≤
        this.addSafeText('–ü—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞ –≥–∞–∑–∞ –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω:', this.margin, this.currentY);
        this.currentY += 15;
    }

    private renderTextLine(prefix: string, value: string): void {
        const fullLine = `${prefix} ${value}`;
        this.addSafeText(fullLine, this.margin, this.currentY);
        this.currentY += 10;
    }

    // ============================================
    // –°–ï–ö–¶–ò–Ø –ü–†–ò–ë–û–†–û–í –£–ß–ï–¢–ê
    // ============================================

    private renderMetersSection(data: ActPlombData): void {
        this.doc.setFont('times', 'normal');
        this.doc.setFontSize(12);

        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º—É–º 3 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤
        const metersToRender = Math.max(3, data.meters?.length || 0);
        
        for (let i = 0; i < metersToRender; i++) {
            const meter = data.meters?.[i];
            if (meter) {
                this.renderMeter(meter, i + 1);
            } else {
                this.renderEmptyMeter(i + 1);
            }
        }
    }

    private renderMeter(meter: PlombMeterData, index: number): void {
        const meterNumber = SafeTextUtils.formatField(meter.meter_number, 15);
        const sealNumber = SafeTextUtils.formatField(meter.seal_number, 20);
        const notes = SafeTextUtils.formatField(meter.notes, 25);
        const reading = SafeTextUtils.formatField(String(meter.current_reading || ''), 15);
        
        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞
        const line1 = `${index}.G- ‚Ññ —Å—á ${meterNumber} –ø–ª–æ–º–±–∞ ‚Ññ${sealNumber} –ø—Ä–∏–º–µ—á–∞–Ω–∏—è ${notes}`;
        this.addSafeText(line1, this.margin, this.currentY);
        this.currentY += 8;
        
        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø–æ–∫–∞–∑–∞–Ω–∏—è
        const line2 = `   —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–±–æ—Ä–∞ —É—á–µ—Ç–∞ –≥–∞–∑–∞: ${reading}–º¬≥`;
        this.addSafeText(line2, this.margin, this.currentY);
        this.currentY += 13;
    }

    private renderEmptyMeter(index: number): void {
        const line1 = `${index}.G- ‚Ññ —Å—á________________ –ø–ª–æ–º–±–∞ ‚Ññ_____________________ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è ____________________`;
        this.addSafeText(line1, this.margin, this.currentY);
        this.currentY += 8;
        
        const line2 = '   —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–±–æ—Ä–∞ —É—á–µ—Ç–∞ –≥–∞–∑–∞: ________________–º¬≥';
        this.addSafeText(line2, this.margin, this.currentY);
        this.currentY += 13;
    }

    // ============================================
    // –ü–û–î–ü–ò–°–ò
    // ============================================

    private renderSignatures(data: ActPlombData): void {
        this.currentY += 20;
        
        this.doc.setFont('times', 'normal');
        this.doc.setFontSize(12);

        // –ü–æ–¥–ø–∏—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –£–°–î
        const usdRep = SafeTextUtils.formatField(data.usd_representative, 30);
        this.addSafeText(`–£–°–î –ê–û ¬´–°–∞—Ö–∞—Ç—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç–µ–≥–∞–∑¬ª ____________________/${usdRep}/`, this.margin, this.currentY);
        
        this.currentY += 15;
        
        // –ü–æ–¥–ø–∏—Å—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        this.addSafeText('–ê–ö–¢ –ü–û–õ–£–ß–ò–õ(–ê): ____________________/_______________________________/', this.margin, this.currentY);
        
        this.currentY += 15;
        
        // –î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è
        const receiptDate = data.receipt_date ? this.formatReceiptDate(data.receipt_date) : '_____________';
        this.addSafeText(`–î–∞—Ç–∞ ${receiptDate}`, this.pageWidth - this.margin - 80, this.currentY);
    }

    private formatReceiptDate(dateString: string): string {
        try {
            const date = new Date(dateString);
            if (isNaN(date.getTime())) return '_____________';
            return date.toLocaleDateString('ru-RU');
        } catch (error) {
            return '_____________';
        }
    }
}