// ============================================
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° PDF –ì–ï–ù–ï–†–ê–¢–û–†–ê
// ============================================

import jsPDF from 'jspdf';
import { PDFConfig, ActOrderData, ActPlombData } from './types';
import { DEFAULT_PDF_CONFIG } from './config';
import { FontLoader, getErrorMessage } from './utils/fontLoader';
import { ActOrderTemplate } from './templates/ActOrderTemplate';

export class PDFGenerator {
    private doc!: jsPDF; // Definite assignment assertion
    private config: PDFConfig;
    private initialized: boolean = false;

    constructor(config?: Partial<PDFConfig>) {
        this.config = { ...DEFAULT_PDF_CONFIG, ...config };
        this.createDocument();
    }

    // ============================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    // ============================================

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (–∑–∞–≥—Ä—É–∂–∞–µ—Ç —à—Ä–∏—Ñ—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
     */
    public async initialize(): Promise<void> {
        if (this.initialized) return;

        try {
            await FontLoader.loadFonts(this.doc);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            FontLoader.setFontSafe(this.doc, 'times', 'normal', 12);
            this.doc.setTextColor(this.config.colors.text);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            const cyrillicSupport = FontLoader.checkCyrillicSupport(this.doc);
            if (!cyrillicSupport) {
                console.warn('‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã');
            }
            
            this.initialized = true;
            console.log('‚úÖ PDFGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
                cyrillicSupport,
                fontInfo: FontLoader.getFontInfo(this.doc)
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PDFGenerator:', error);
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É
            this.initialized = true;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π PDF –¥–æ–∫—É–º–µ–Ω—Ç
     */
    private createDocument(): void {
        try {
            this.doc = new jsPDF({
                orientation: this.config.orientation,
                unit: 'mm',
                format: this.config.format
            });

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            FontLoader.setFontSafe(this.doc, 'times', 'normal', this.config.fonts.regular.size);
            this.doc.setTextColor(this.config.colors.text);
            
            console.log('‚úÖ PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –¥–æ–∫—É–º–µ–Ω—Ç');
        }
    }

    // ============================================
    // –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–û–ö–£–ú–ï–ù–¢–û–í
    // ============================================

    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ê–ö–¢-–ù–ê–†–Ø–î
     */
    public async generateActOrder(data: ActOrderData): Promise<void> {
        if (!this.initialized) {
            await this.initialize();
        }

        try {
            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ê–ö–¢-–ù–ê–†–Ø–î–ê —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if (!data || typeof data !== 'object') {
                throw new Error('–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞');
            }

            const template = new ActOrderTemplate(this.doc, this.config);
            template.renderDocument(data);
            
            console.log('‚úÖ –ê–ö–¢-–ù–ê–†–Ø–î —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ê–ö–¢-–ù–ê–†–Ø–î–ê:', error);
            
            // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.createFallbackDocument(data);
            
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ê–ö–¢-–ù–ê–†–Ø–î: ${ getErrorMessage(error) }`);
        }
    }

 /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ê–ö–¢–ê –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
     */
    public async generateActPlomb(data: ActPlombData): Promise<void> {
        if (!this.initialized) {
            await this.initialize();
        }

        try {
            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ê–ö–¢–ê –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if (!data || typeof data !== 'object') {
                throw new Error('–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞');
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!data.subscriber_name?.trim()) {
                throw new Error('–§–ò–û –∞–±–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞');
            }

            if (!data.act_date) {
                throw new Error('–î–∞—Ç–∞ –∞–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
            }

            // –û—á–∏—â–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É
            this.createDocument();
            await this.setupCyrillicSupport();

            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
            const { ActPlombTemplate } = await import('./templates/ActplombTemplate');
            const template = new ActPlombTemplate(this.doc, this.config);
            
            // –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
            template.renderDocument(data);
            
            console.log('‚úÖ –ê–ö–¢ –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ê–ö–¢–ê –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø:', error);
            
            // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.createPlombFallbackDocument(data);
            
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ê–ö–¢ –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø: ${ getErrorMessage(error) }`);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
     */
    private async setupCyrillicSupport(): Promise<void> {
        try {
            console.log('üîÑ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∏—Ä–∏–ª–ª–∏—Ü—ã...');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —à—Ä–∏—Ñ—Ç Times
            this.doc.setFont('times', 'normal');
            this.doc.setFontSize(12);
            this.doc.setTextColor(0, 0, 0);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            const testText = '–¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –ê–ë–í –∞–±–≤';
            try {
                this.doc.text(testText, -100, -100); // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
                console.log('‚úÖ –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            } catch (cyrillicError) {
                console.warn('‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã:', cyrillicError);
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã:', error);
        }
    }

    private createPlombFallbackDocument(data: ActPlombData): void {
        try {
            console.log('üîÑ –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ê–ö–¢–ê –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø...');
            
            // –û—á–∏—â–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            this.createDocument();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
            this.doc.setFont('times', 'bold');
            this.doc.setFontSize(16);
            this.doc.text('–ê–ö–¢ –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø –ü–†–ò–ë–û–†–ê –£–ß–ï–¢–ê –ì–ê–ó–ê', 20, 30);
            
            this.doc.setFont('times', 'normal');
            this.doc.setFontSize(12);
            
            let yPos = 50;
            
            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if (data.act_number) {
                this.doc.text(`‚Ññ ${data.act_number}`, 20, yPos);
                yPos += 10;
            }
            
            if (data.act_date) {
                try {
                    const date = new Date(data.act_date).toLocaleDateString('ru-RU');
                    this.doc.text(`–î–∞—Ç–∞: ${date}`, 20, yPos);
                } catch (dateError) {
                    this.doc.text(`–î–∞—Ç–∞: ${data.act_date}`, 20, yPos);
                }
                yPos += 10;
            }
            
            if (data.subscriber_name) {
                this.doc.text(`–ê–±–æ–Ω–µ–Ω—Ç: ${data.subscriber_name}`, 20, yPos);
                yPos += 10;
            }
            
            // –ê–¥—Ä–µ—Å
            const address = data.address || (data.street && data.house && data.apartment 
                ? `${data.street}, ${data.house}, –∫–≤. ${data.apartment}` 
                : '');
            if (address) {
                this.doc.text(`–ê–¥—Ä–µ—Å: ${address}`, 20, yPos);
                yPos += 10;
            }
            
            if (data.usd_representative) {
                this.doc.text(`–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –£–°–î: ${data.usd_representative}`, 20, yPos);
                yPos += 10;
            }
            
            // –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç—á–∏–∫–æ–≤
            if (data.meters && data.meters.length > 0) {
                yPos += 10;
                this.doc.text('–ü—Ä–∏–±–æ—Ä—ã —É—á–µ—Ç–∞:', 20, yPos);
                yPos += 10;
                
                data.meters.forEach((meter, index) => {
                    if (yPos > this.doc.internal.pageSize.getHeight() - 40) {
                        this.doc.addPage();
                        yPos = 30;
                    }
                    
                    const meterText = `${index + 1}. –°—á–µ—Ç—á–∏–∫ ‚Ññ${meter.meter_number || '–Ω–µ —É–∫–∞–∑–∞–Ω'}, –ø–ª–æ–º–±–∞ ‚Ññ${meter.seal_number || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`;
                    this.doc.text(meterText, 25, yPos);
                    yPos += 8;
                    
                    if (meter.current_reading) {
                        this.doc.text(`   –ü–æ–∫–∞–∑–∞–Ω–∏—è: ${meter.current_reading}–º¬≥`, 25, yPos);
                        yPos += 8;
                    }
                    
                    yPos += 5;
                });
            }
            
            // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ–± —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
            const noteY = this.doc.internal.pageSize.getHeight() - 40;
            this.doc.setFontSize(10);
            this.doc.text('–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', 20, noteY);
            
            console.log('‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ê–ö–¢–ê –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø —Å–æ–∑–¥–∞–Ω');
        } catch (fallbackError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ê–ö–¢–ê –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø:', fallbackError);
            
            // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            this.doc.setFont('times', 'normal');
            this.doc.setFontSize(12);
            this.doc.text('–ê–ö–¢ –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø', 20, 30);
            this.doc.text('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞', 20, 50);
            if (data.subscriber_name) {
                this.doc.text(`–ê–±–æ–Ω–µ–Ω—Ç: ${data.subscriber_name}`, 20, 70);
            }
        }
    }
    
    private createFallbackDocument(data: ActOrderData): void {
        try {
            console.log('üîÑ –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ê–ö–¢-–ù–ê–†–Ø–î–ê...');
            
            // –û—á–∏—â–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            this.createDocument();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            FontLoader.setFontSafe(this.doc, 'times', 'bold', 16);
            FontLoader.addTextSafe(this.doc, '–ê–ö–¢-–ù–ê–†–Ø–î', 20, 30);
            
            FontLoader.setFontSafe(this.doc, 'times', 'normal', 12);
            FontLoader.addTextSafe(this.doc, `‚Ññ ${data.actNumber || '–ù–µ —É–∫–∞–∑–∞–Ω'}`, 20, 50);
            
            if (data.date) {
                const date = new Date(data.date).toLocaleDateString('ru-RU');
                FontLoader.addTextSafe(this.doc, `–î–∞—Ç–∞: ${date}`, 20, 70);
            }
            
            FontLoader.addTextSafe(this.doc, '–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', 20, 100);
            
            console.log('‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ê–ö–¢-–ù–ê–†–Ø–î–ê —Å–æ–∑–¥–∞–Ω');
        } catch (fallbackError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ê–ö–¢-–ù–ê–†–Ø–î–ê:', fallbackError);
        }
    }


    // ============================================
    // –≠–ö–°–ü–û–†–¢ –ò –°–û–•–†–ê–ù–ï–ù–ò–ï
    // ============================================

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç PDF –∫–∞–∫ —Ñ–∞–π–ª
     */
    public savePDF(filename: string = 'document.pdf'): void {
        try {
            this.doc.save(filename);
            console.log(`‚úÖ PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: ${filename}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF —Ñ–∞–π–ª');
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç PDF –∫–∞–∫ Blob
     */
    public getBlob(): Blob {
        try {
            const blob = this.doc.output('blob');
            console.log('‚úÖ Blob —Å–æ–∑–¥–∞–Ω');
            return blob;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Blob:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Blob');
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç PDF –∫–∞–∫ ArrayBuffer
     */
    public getArrayBuffer(): ArrayBuffer {
        try {
            const buffer = this.doc.output('arraybuffer');
            console.log('‚úÖ ArrayBuffer —Å–æ–∑–¥–∞–Ω');
            return buffer;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ArrayBuffer:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ArrayBuffer');
        }
    }

    // ============================================
    // –ü–†–ï–î–ü–†–û–°–ú–û–¢–†
    // ============================================

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç PDF –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    public preview(): void {
        try {
            const blob = this.getBlob();
            const url = URL.createObjectURL(blob);
            window.open(url, '_blank');
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º URL —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
            setTimeout(() => URL.revokeObjectURL(url), 1000);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä');
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ iframe
     */
    public getPreviewUrl(): string {
        try {
            const blob = this.getBlob();
            const url = URL.createObjectURL(blob);
            console.log('‚úÖ URL –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω');
            return url;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è URL –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å URL –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
        }
    }

    // ============================================
    // –ü–ï–ß–ê–¢–¨
    // ============================================

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –ø–µ—á–∞—Ç—å
     */
    public print(): void {
        try {
            const blob = this.getBlob();
            const url = URL.createObjectURL(blob);
            
            // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π iframe –¥–ª—è –ø–µ—á–∞—Ç–∏
            const iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            iframe.src = url;
            
            document.body.appendChild(iframe);
            
            iframe.onload = () => {
                try {
                    iframe.contentWindow?.print();
                } catch (printError) {
                    console.warn('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—á–∞—Ç—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ');
                    window.open(url, '_blank');
                }
                
                // –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                setTimeout(() => {
                    document.body.removeChild(iframe);
                    URL.revokeObjectURL(url);
                }, 1000);
            };
            
            console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
        }
    }

    // ============================================
    // –ü–û–î–ï–õ–ò–¢–¨–°–Ø
    // ============================================

    /**
     * –î–µ–ª–∏—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ Web Share API (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
     */
    public async share(filename: string = 'document.pdf'): Promise<void> {
        try {
            if (!navigator.share) {
                throw new Error('Web Share API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            }

            const blob = this.getBlob();
            const file = new File([blob], filename, { type: 'application/pdf' });

            await navigator.share({
                title: 'PDF –¥–æ–∫—É–º–µ–Ω—Ç',
                text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–º',
                files: [file]
            });

            console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
            
            // Fallback - —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            this.savePDF(filename);
        }
    }

    // ============================================
    // –£–¢–ò–õ–ò–¢–´
    // ============================================

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
     */
    public getDocumentInfo(): any {
        return {
            pageCount: this.doc.getNumberOfPages(),
            pageSize: {
                width: this.doc.internal.pageSize.getWidth(),
                height: this.doc.internal.pageSize.getHeight()
            },
            config: this.config,
            initialized: this.initialized
        };
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π
     */
    public reset(): void {
        try {
            this.createDocument();
            console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–±—Ä–æ—à–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
        }
    }

    /**
     * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
     */
    public dispose(): void {
        try {
            // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
            delete (this as any).doc;
            delete (this as any).config;
            
            console.log('‚úÖ –†–µ—Å—É—Ä—Å—ã PDFGenerator –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤:', error);
        }
    }
}