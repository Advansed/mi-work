// ============================================
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –≠–ö–°–ü–û–†–¢–´ PDF –ú–û–î–£–õ–Ø
// ============================================

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
export { PDFGenerator } from './PDFGenerator';
export { PDFGeneratorComponent } from './PDFGeneratorComponent';

// –®–∞–±–ª–æ–Ω—ã
export { BaseTemplate } from './templates/BaseTemplate';
export { ActOrderTemplate } from './templates/ActOrderTemplate';
export { ActPlombTemplate } from './templates/ActplombTemplate';

// –£—Ç–∏–ª–∏—Ç—ã
export { FontLoader } from './utils/fontLoader';
export { TextUtils } from './utils/textUtils';
export { MeasureUtils } from './utils/measureUtils';

// –¢–∏–ø—ã
export type {
    ActOrderData,
    ActPlombData,
    PlombMeterData,
    RepresentativeData,
    OrderData,
    ExecutionData,
    ReconnectionData,
    SignatureData,
    PDFConfig,
    FontConfig,
    TextOptions,
    FieldPosition,
    TemplateLayout,
    FieldPositions,
    SectionSpacing,
    PDFGenerationResult,
    PDFGenerationOptions,
    TemplateRenderOptions,
    TemplateValidationResult,
    TextMeasurement,
    FontInfo
} from './types';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
export {
    DEFAULT_PDF_CONFIG,
    PAGE_DIMENSIONS,
    CORPORATE_SETTINGS,
    FIELD_SETTINGS,
    SIGNATURE_SETTINGS,
    ACT_PLOMB_CONFIG,
    CYRILLIC_CONFIG,
    ConfigUtils
} from './config';

import { PDFGenerator } from './PDFGenerator';
// CSS —Å—Ç–∏–ª–∏ (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
import './PDFGenerator.css';
import { ActOrderData, ActPlombData } from './types';
import { ACT_PLOMB_CONFIG } from './config';

// ============================================
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò
// ============================================

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∞–∫—Ç–∞ –ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç ActPlombData
 */
export function convertFormDataToActPlomb(formData: any): ActPlombData {
    // –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
    const cleanString = (value: any): string => {
        if (value === null || value === undefined) return '';
        return String(value).trim();
    };

    // –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
    const cleanMeters = (meters: any[]): any[] => {
        if (!Array.isArray(meters)) return [];
        
        return meters
            .filter(meter => meter && typeof meter === 'object')
            .map((meter, index) => ({
                meter_number: cleanString(meter.meter_number),
                seal_number: cleanString(meter.seal_number),
                current_reading: meter.current_reading ? cleanString(meter.current_reading) : '',
                meter_type: cleanString(meter.meter_type),
                notes: cleanString(meter.notes),
                sequence_order: index + 1
            }))
            .filter(meter => meter.meter_number || meter.seal_number);
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    const formatDate = (dateValue: any): string => {
        if (!dateValue) return new Date().toISOString().split('T')[0];
        
        try {
            const date = new Date(dateValue);
            if (isNaN(date.getTime())) {
                return new Date().toISOString().split('T')[0];
            }
            return date.toISOString().split('T')[0];
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
            return new Date().toISOString().split('T')[0];
        }
    };

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    const createFullAddress = (street: string, house: string, apartment: string, existingAddress?: string): string => {
        if (existingAddress && existingAddress.trim()) {
            return existingAddress.trim();
        }
        
        const parts = [
            street ? street : '',
            house ? `–¥. ${house}` : '',
            apartment ? `–∫–≤. ${apartment}` : ''
        ].filter(part => part);
        
        return parts.join(', ') || '';
    };

    // –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    try {
        const street = cleanString(formData.street);
        const house = cleanString(formData.house);
        const apartment = cleanString(formData.apartment);
        
        const result: ActPlombData = {
            id: formData.id ? cleanString(formData.id) : undefined,
            act_number: formData.act_number ? cleanString(formData.act_number) : undefined,
            act_date: formatDate(formData.act_date),
            subscriber_name: cleanString(formData.subscriber_name),
            usd_representative: cleanString(formData.usd_representative),
            street: street,
            house: house,
            apartment: apartment,
            address: createFullAddress(street, house, apartment, formData.address),
            notes: cleanString(formData.notes),
            invoice_id: formData.invoice_id ? cleanString(formData.invoice_id) : undefined,
            recipient_signature: formData.recipient_signature ? cleanString(formData.recipient_signature) : undefined,
            receipt_date: formData.receipt_date ? formatDate(formData.receipt_date) : undefined,
            created_at: formData.created_at ? cleanString(formData.created_at) : undefined,
            updated_at: formData.updated_at ? cleanString(formData.updated_at) : undefined,
            meters: cleanMeters(formData.meters || [])
        };

        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è PDF:', result);
        return result;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã:', error);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return {
            act_date: new Date().toISOString().split('T')[0],
            subscriber_name: cleanString(formData.subscriber_name) || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            street: cleanString(formData.street) || '',
            house: cleanString(formData.house) || '',
            apartment: cleanString(formData.apartment) || '',
            usd_representative: cleanString(formData.usd_representative) || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            meters: []
        };
    }
}

// ============================================
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –•–ï–õ–ü–ï–†–´ –î–õ–Ø –ë–´–°–¢–†–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
// ============================================

/**
 * –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ê–ö–¢-–ù–ê–†–Ø–î–ê
 */
export async function generateActOrderPDF(data: ActOrderData, filename?: string): Promise<Blob> {
    const generator = new PDFGenerator();
    await generator.initialize();
    await generator.generateActOrder(data);
    
    if (filename) {
        generator.savePDF(filename);
    }
    
    return generator.getBlob();
}

/**
 * –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ê–ö–¢-–ù–ê–†–Ø–î–ê
 */
export async function previewActOrderPDF(data: ActOrderData): Promise<string> {
    const generator = new PDFGenerator();
    await generator.initialize();
    await generator.generateActOrder(data);
    
    return generator.getPreviewUrl();
}

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ê–ö–¢–ê –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø
 */
export async function generateActPlombPDF(data: ActPlombData, filename?: string): Promise<Blob> {
    const generator = new PDFGenerator(ACT_PLOMB_CONFIG);
    
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF –¥–ª—è –∞–∫—Ç–∞ –ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        await generator.initialize();
        await generator.generateActPlomb(data);
        
        if (filename) {
            generator.savePDF(filename);
            console.log(`‚úÖ PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: ${filename}`);
        }
        
        const blob = generator.getBlob();
        console.log('‚úÖ PDF blob —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä:', blob.size, '–±–∞–π—Ç');
        
        return blob;
        
    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –∞–∫—Ç–∞ –ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF: ${error.message}`);
    } finally {
        generator.dispose();
    }
}

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –±—ã—Å—Ç—Ä—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ê–ö–¢–ê –ü–õ–û–ú–ë–ò–†–û–í–ê–ù–ò–Ø
 */
export async function previewActPlombPDF(data: ActPlombData): Promise<string> {
    const generator = new PDFGenerator(ACT_PLOMB_CONFIG);
    
    try {
        console.log('üîÑ –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä PDF –¥–ª—è –∞–∫—Ç–∞ –ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        await generator.initialize();
        await generator.generateActPlomb(data);
        
        const url = generator.getPreviewUrl();
        console.log('‚úÖ URL –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω');
        
        return url;
        
    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF:', error);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: ${error.message}`);
    }
    // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º dispose() –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —Ç–∞–∫ –∫–∞–∫ URL –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç ActOrderData
 */
export function convertFormDataToActOrder(formData: any): ActOrderData {
    return {
        actNumber: formData.actNumber || '',
        date: formData.date || new Date().toISOString(),
        representative: {
            name: formData.representative || '',
            position: formData.position || '',
            reason: formData.reason || ''
        },
        order: {
            equipment: formData.equipment || '',
            apartment: formData.apartment || '',
            house: formData.house || '',
            street: formData.street || '',
            subscriber: formData.subscriber || ''
        },
        execution: {
            datetime: formData.executionDatetime || '',
            equipment_description: formData.equipmentDescription || '',
            apartment: formData.apartment || '',
            house: formData.house || '',
            street: formData.street || ''
        },
        reconnection: {
            representative: formData.representative || '',
            subscriber: formData.subscriber || '',
            apartment: formData.apartment || '',
            house: formData.house || '',
            street: formData.street || '',
            connection_date: formData.connectionDate || ''
        },
        signatures: {
            representative: formData.representative || '',
            subscriber: formData.subscriber || ''
        }
    };
}

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∞ –ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function validateActPlombData(data: ActPlombData): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!data.act_date) {
        errors.push('–î–∞—Ç–∞ –∞–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
    }

    if (!data.subscriber_name?.trim()) {
        errors.push('–§–ò–û –∞–±–æ–Ω–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }

    if (!data.street?.trim()) {
        errors.push('–£–ª–∏—Ü–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
    }

    if (!data.house?.trim()) {
        errors.push('–ù–æ–º–µ—Ä –¥–æ–º–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    if (!data.apartment?.trim()) {
        errors.push('–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    if (!data.usd_representative?.trim()) {
        errors.push('–§–ò–û –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –£–°–î –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (data.meters && data.meters.length > 0) {
        data.meters.forEach((meter, index) => {
            if (!meter.meter_number?.trim()) {
                errors.push(`–ù–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞ #${index + 1} –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω`);
            }
            if (!meter.seal_number?.trim()) {
                errors.push(`–ù–æ–º–µ—Ä –ø–ª–æ–º–±—ã #${index + 1} –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω`);
            }
        });
    }

    return {
        isValid: errors.length === 0,
        errors
    };
}

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–∫—Ç–∞ –ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function generateActPlombFilename(data: ActPlombData): string {
    try {
        const actNumber = data.act_number || '–Ω–æ–≤—ã–π';
        const cleanActNumber = actNumber.replace(/[^a-zA-Z0-9\-]/g, '_');
        
        const date = data.act_date ? new Date(data.act_date).toLocaleDateString('ru-RU').replace(/\./g, '-') : '–±–µ–∑_–¥–∞—Ç—ã';
        
        const subscriberName = data.subscriber_name ? 
            data.subscriber_name.split(' ')[0].replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9]/g, '') : 
            '–∞–±–æ–Ω–µ–Ω—Ç';
            
        return `–ê–∫—Ç_–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è_${cleanActNumber}_${subscriberName}_${date}.pdf`;
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:', error);
        return `–ê–∫—Ç_–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏—è_${new Date().toISOString().split('T')[0]}.pdf`;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export function createTestActPlombData(): ActPlombData {
    return {
        act_number: '–ê–ü-2025-0001',
        act_date: '2025-08-07',
        subscriber_name: '–ú–∏—Ö–µ–µ–≤–∞ –õ—é–±–æ–≤—å –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞',
        street: '—Å–µ–ª–æ –ü—Ä–∏–≥–æ—Ä–æ–¥–Ω—ã–π, —É–ª. –ú–æ–ª–æ–¥–µ–∂–Ω–∞—è',
        house: '18/1',
        apartment: '1',
        address: '–Ø–∫—É—Ç—Å–∫: —Å–µ–ª–æ –ü—Ä–∏–≥–æ—Ä–æ–¥–Ω—ã–π, —É–ª. –ú–æ–ª–æ–¥–µ–∂–Ω–∞—è, –¥. 18/1',
        usd_representative: '–ò–≤–∞–Ω–æ–≤ –ò.–ò.',
        notes: '–ü–ª–∞–Ω–æ–≤–æ–µ –ø–ª–æ–º–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏',
        meters: [
            {
                meter_number: 'G4-123456',
                seal_number: '–ü–õ-2025-001',
                current_reading: '22',
                meter_type: 'G4',
                notes: '–†–∞–±–æ—á–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
                sequence_order: 1
            }
        ]
    };
}