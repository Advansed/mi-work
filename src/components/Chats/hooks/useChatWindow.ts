import { useState, useEffect, useRef, useCallback } from 'react';
import { useSocket } from './useSocket';
import { useChatMessages, ChatMessage } from './useChatMessages';
import { useTyping } from './useTyping';

export interface UseChatWindowProps {
  chatId: string;
}

export interface UseChatWindowReturn {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  loading: boolean;
  error: string | null;
  
  // –°–æ–æ–±—â–µ–Ω–∏—è
  messages: ChatMessage[];
  sendingMessage: boolean;
  hasMoreMessages: boolean;
  messagesError: string | null;
  
  // –ü–µ—á–∞—Ç—å
  typingUsers: string[];
  isTyping: boolean;
  
  // –ú–µ—Ç–æ–¥—ã —Å–æ–æ–±—â–µ–Ω–∏–π
  sendMessage: (text: string) => Promise<void>;
  loadMoreMessages: () => void;
  
  // –ú–µ—Ç–æ–¥—ã –ø–µ—á–∞—Ç–∏
  startTyping: () => void;
  stopTyping: () => void;
  
  // –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã
  clearError: () => void;
}

export const useChatWindow = ({ chatId }: UseChatWindowProps): UseChatWindowReturn => {
  // –û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Socket
  const { isConnected, error: socketError, emit, on, off } = useSocket();
  
  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö—É–∫–∏
  const {
    messages,
    sendingMessage,
    hasMoreMessages,
    messagesError,
    sendMessage,
    loadMoreMessages,
    loadMessages,
    clearMessagesError
  } = useChatMessages({ chatId });
  
  const {
    typingUsers,
    isTyping,
    startTyping,
    stopTyping
  } = useTyping({ chatId });

  // Refs –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  const loadingInitiated = useRef(false);
  const currentChatId = useRef<string>('');
  const loadTimeout = useRef<number | undefined>(undefined);

  // –û—á–∏—Å—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫
  const clearError = useCallback(() => {
    setError(null);
    clearMessagesError();
  }, [clearMessagesError]);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞
  useEffect(() => {
    if (currentChatId.current !== chatId) {
      console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Ç: ${chatId}`);
      
      currentChatId.current = chatId;
      loadingInitiated.current = false;
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
      if (loadTimeout.current) {
        window.clearTimeout(loadTimeout.current);
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setLoading(true);
      setError(null);
    }
  }, [chatId]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å–æ–∫–µ—Ç–∞
  useEffect(() => {
    if (socketError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞: ${socketError}`);
      setError(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${socketError}`);
      setLoading(false);
    }
  }, [socketError]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —á–∞—Ç)
  useEffect(() => {
    if (isConnected && chatId && !loadingInitiated.current) {
      console.log(`üì• –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞: ${chatId}`);
      
      loadingInitiated.current = true;
      
      // Debounced –∑–∞–≥—Ä—É–∑–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      loadTimeout.current = window.setTimeout(() => {
        console.log(`üì• –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞: ${chatId}`);
        loadMessages();
        setLoading(false);
      }, 200);
    }
  }, [isConnected, chatId]); // –£–±–∏—Ä–∞–µ–º loadMessages –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—â–∏—Ö —Å–æ–±—ã—Ç–∏–π (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  useEffect(() => {
    if (!chatId) return;

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–æ–∫–µ—Ç–∞
    const onDisconnect = () => {
      console.log(`üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–æ–∫–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
      setError('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    };

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∫–µ—Ç—É
    const onReconnect = () => {
      console.log(`üîå –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∫–µ—Ç—É –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
      setError(null);
      
      // –ü—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏ –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ
      loadingInitiated.current = false;
    };

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    on('disconnect', onDisconnect);
    on('connect', onReconnect);

    return () => {
      off('disconnect', onDisconnect);
      off('connect', onReconnect);
      
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (loadTimeout.current) {
        window.clearTimeout(loadTimeout.current);
      }
    };
  }, [chatId, on, off]); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    if (messagesError) {
      setLoading(false);
    }
  }, [messagesError]);

  // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ª–∞–¥–∫—É - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
  useEffect(() => {
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ useChatWindow –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:');
    console.log('  - chatId:', chatId);
    console.log('  - isConnected:', isConnected);
    console.log('  - loading:', loading);
    console.log('  - loadingInitiated:', loadingInitiated.current);
    console.log('  - error:', error);
    console.log('  - messagesError:', messagesError);
  }, [chatId, isConnected, loading, error, messagesError]);

  return {
    // –û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    loading,
    error: error || messagesError,
    
    // –°–æ–æ–±—â–µ–Ω–∏—è
    messages,
    sendingMessage,
    hasMoreMessages,
    messagesError,
    
    // –ü–µ—á–∞—Ç—å
    typingUsers,
    isTyping,
    
    // –ú–µ—Ç–æ–¥—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    sendMessage,
    loadMoreMessages,
    
    // –ú–µ—Ç–æ–¥—ã –ø–µ—á–∞—Ç–∏
    startTyping,
    stopTyping,
    
    // –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã
    clearError
  };
};