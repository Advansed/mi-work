import { useState, useEffect, useRef, useCallback } from 'react';
import { useSocket } from './useSocket';
import { useChatMessages, ChatMessage } from './useChatMessages';
import { useTyping } from './useTyping';

export interface UseChatWindowProps {
  chatId: string;
}

export interface UseChatWindowReturn {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  loading: boolean;
  error: string | null;
  
  // –°–æ–æ–±—â–µ–Ω–∏—è
  messages: ChatMessage[];
  sendingMessage: boolean;
  hasMoreMessages: boolean;
  messagesError: string | null;
  
  // –ü–µ—á–∞—Ç—å
  typingUsers: string[];
  isTyping: boolean;
  
  // –ú–µ—Ç–æ–¥—ã —Å–æ–æ–±—â–µ–Ω–∏–π
  sendMessage: (text: string) => Promise<void>;
  loadMoreMessages: () => void;
  
  // –ú–µ—Ç–æ–¥—ã –ø–µ—á–∞—Ç–∏
  startTyping: () => void;
  stopTyping: () => void;
  
  // –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã
  clearError: () => void;
}

export const useChatWindow = ({ chatId }: UseChatWindowProps): UseChatWindowReturn => {
  // –û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Socket
  const { isConnected, emit, on, off } = useSocket();
  
  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö—É–∫–∏
  const {
    messages,
    sendingMessage,
    hasMoreMessages,
    messagesError,
    sendMessage,
    loadMoreMessages,
    loadMessages,
    clearMessagesError
  } = useChatMessages({ chatId });
  
  const {
    typingUsers,
    isTyping,
    startTyping,
    stopTyping
  } = useTyping({ chatId });

  // –û—á–∏—Å—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫
  const clearError = useCallback(() => {
    setError(null);
    clearMessagesError();
  }, [clearMessagesError]);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞
  useEffect(() => {
    console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Ç: ${chatId}`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setLoading(true);
    setError(null);
  }, [chatId]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  useEffect(() => {
    console.log('load')
    console.log( isConnected, chatId )
    if (isConnected && chatId) {
      console.log(`üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞: ${chatId}`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ä–∞–∑—É
      setTimeout(() => {
        loadMessages();
        setLoading(false);
      }, 100);
    }
  }, [isConnected, chatId, loadMessages]);

  // WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–æ–∫–µ—Ç–∞
    const onDisconnect = () => {
      console.log(`üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–æ–∫–µ—Ç–∞`);
    };

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∫–µ—Ç—É
    const onReconnect = () => {
      console.log(`üîå –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∫–µ—Ç—É`);
      if (chatId) {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
        setTimeout(() => {
          loadMessages();
        }, 500);
      }
    };

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    on('disconnect', onDisconnect);
    on('connect', onReconnect);

    return () => {
      off('disconnect', onDisconnect);
      off('connect', onReconnect);
    };
  }, [chatId, loadMessages, emit, on, off]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    if (messagesError) {
      setLoading(false);
    }
  }, [messagesError]);

  return {
    // –û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    loading,
    error: error || messagesError,
    
    // –°–æ–æ–±—â–µ–Ω–∏—è
    messages,
    sendingMessage,
    hasMoreMessages,
    messagesError,
    
    // –ü–µ—á–∞—Ç—å
    typingUsers,
    isTyping,
    
    // –ú–µ—Ç–æ–¥—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    sendMessage,
    loadMoreMessages,
    
    // –ú–µ—Ç–æ–¥—ã –ø–µ—á–∞—Ç–∏
    startTyping,
    stopTyping,
    
    // –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã
    clearError
  };
};