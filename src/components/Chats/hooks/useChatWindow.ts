import { useState, useEffect, useRef, useCallback } from 'react';
import { useSocket } from './useSocket';
import { useChatMessages, ChatMessage } from './useChatMessages';
import { useTyping } from './useTyping';

export interface UseChatWindowProps {
  chatId: string;
}

export interface UseChatWindowReturn {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  loading: boolean;
  error: string | null;
  isJoined: boolean;
  
  // –°–æ–æ–±—â–µ–Ω–∏—è
  messages: ChatMessage[];
  sendingMessage: boolean;
  hasMoreMessages: boolean;
  messagesError: string | null;
  
  // –ü–µ—á–∞—Ç—å
  typingUsers: string[];
  isTyping: boolean;
  
  // –ú–µ—Ç–æ–¥—ã —Å–æ–æ–±—â–µ–Ω–∏–π
  sendMessage: (text: string) => Promise<void>;
  loadMoreMessages: () => void;
  
  // –ú–µ—Ç–æ–¥—ã –ø–µ—á–∞—Ç–∏
  startTyping: () => void;
  stopTyping: () => void;
  
  // –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã
  clearError: () => void;
  retryJoin: () => void;
}

export const useChatWindow = ({ chatId }: UseChatWindowProps): UseChatWindowReturn => {
  // –û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isJoined, setIsJoined] = useState(false);
  
  // –†–µ—Ñ—ã
  const isJoinedRef = useRef(false);
  const joinAttemptRef = useRef(false);
  
  // Socket
  const { isConnected, emit, on, off } = useSocket();
  
  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö—É–∫–∏
  const {
    messages,
    sendingMessage,
    hasMoreMessages,
    messagesError,
    sendMessage,
    loadMoreMessages,
    loadMessages,
    clearMessagesError
  } = useChatMessages({ chatId });
  
  const {
    typingUsers,
    isTyping,
    startTyping,
    stopTyping
  } = useTyping({ chatId });

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É
  const joinChatRoom = useCallback(() => {
    if (!isConnected || !chatId || isJoinedRef.current || joinAttemptRef.current) {
      return;
    }
    
    joinAttemptRef.current = true;
    setError(null);
    
    console.log(`üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É: ${chatId}`);
    emit('join_chat', { chat_id: chatId });
  }, [isConnected, chatId, emit]);

  // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const retryJoin = useCallback(() => {
    isJoinedRef.current = false;
    joinAttemptRef.current = false;
    setIsJoined(false);
    setError(null);
    joinChatRoom();
  }, [joinChatRoom]);

  // –û—á–∏—Å—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫
  const clearError = useCallback(() => {
    setError(null);
    clearMessagesError();
  }, [clearMessagesError]);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞
  useEffect(() => {
    console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Ç: ${chatId}`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setLoading(true);
    setError(null);
    setIsJoined(false);
    isJoinedRef.current = false;
    joinAttemptRef.current = false;
    
    return () => {
      isJoinedRef.current = false;
      joinAttemptRef.current = false;
    };
  }, [chatId]);

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  useEffect(() => {
    if (isConnected && chatId && !isJoinedRef.current) {
      joinChatRoom();
    }
  }, [isConnected, chatId, joinChatRoom]);

  // WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    // –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É
    const onChatJoined = (data: { success: boolean; chat_id: string }) => {
      if (data.chat_id === chatId && data.success) {
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É ${chatId}`);
        isJoinedRef.current = true;
        joinAttemptRef.current = false;
        setIsJoined(true);
        setError(null);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        setTimeout(() => {
          loadMessages();
          setLoading(false);
        }, 100);
      }
    };

    // –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–∞—Ç—É
    const onJoinError = (data: { error: string }) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–∞—Ç—É: ${data.error}`);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${data.error}`);
      setLoading(false);
      setIsJoined(false);
      isJoinedRef.current = false;
      joinAttemptRef.current = false;
    };

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–æ–∫–µ—Ç–∞
    const onDisconnect = () => {
      console.log(`üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–æ–∫–µ—Ç–∞`);
      setIsJoined(false);
      isJoinedRef.current = false;
      joinAttemptRef.current = false;
    };

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∫–µ—Ç—É
    const onReconnect = () => {
      console.log(`üîå –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∫–µ—Ç—É`);
      if (chatId) {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
        setTimeout(() => {
          retryJoin();
        }, 500);
      }
    };

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    on('chat_joined', onChatJoined);
    on('join_error', onJoinError);
    on('disconnect', onDisconnect);
    on('connect', onReconnect);

    return () => {
      off('chat_joined', onChatJoined);
      off('join_error', onJoinError);
      off('disconnect', onDisconnect);
      off('connect', onReconnect);
    };
  }, [chatId, loadMessages, retryJoin, on, off]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    if (messagesError) {
      setLoading(false);
    }
  }, [messagesError]);

  return {
    // –û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    loading,
    error: error || messagesError,
    isJoined,
    
    // –°–æ–æ–±—â–µ–Ω–∏—è
    messages,
    sendingMessage,
    hasMoreMessages,
    messagesError,
    
    // –ü–µ—á–∞—Ç—å
    typingUsers,
    isTyping,
    
    // –ú–µ—Ç–æ–¥—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    sendMessage,
    loadMoreMessages,
    
    // –ú–µ—Ç–æ–¥—ã –ø–µ—á–∞—Ç–∏
    startTyping,
    stopTyping,
    
    // –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã
    clearError,
    retryJoin
  };
};