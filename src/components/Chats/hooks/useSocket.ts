import { useEffect, useState, useCallback, useRef } from 'react';
import { socketService } from '../services/socketService';

export const useSocket = () => {
  const [isConnected, setIsConnected] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
  const handlersSet = useRef(false);

  useEffect(() => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    if (handlersSet.current) {
      return;
    }

    console.log('üöÄ useSocket useEffect –∑–∞–ø—É—â–µ–Ω');
    
    const socket = socketService.connect();
    
    if (!socket) {
      console.error('‚ùå socketService.connect() –≤–µ—Ä–Ω—É–ª null');
      setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–∫–µ—Ç–∞');
      return;
    }

    console.log('üîó Socket —Å–æ–∑–¥–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏');

    const onConnect = () => {
      console.log('‚úÖ useSocket: socket connected');
      console.log('üÜî Socket ID:', socket.id);
      setIsConnected(true);
      setError(null);
    };

    const onDisconnect = (reason: string) => {
      console.log('üîå useSocket: socket disconnected, –ø—Ä–∏—á–∏–Ω–∞:', reason);
      setIsConnected(false);
      
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      if (reason !== 'io client disconnect') {
        setError(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ: ${reason}`);
      }
    };

    const onConnectError = (error: any) => {
      console.error('‚ùå useSocket: socket connect error');
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
      
      if (error?.message) {
        errorMessage += `: ${error.message}`;
      } else if (typeof error === 'string') {
        errorMessage += `: ${error}`;
      } else {
        errorMessage += ': –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é';
      }
      
      setError(errorMessage);
      setIsConnected(false);
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    socket.on('connect', onConnect);
    socket.on('disconnect', onDisconnect);
    socket.on('connect_error', onConnectError);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('üîç –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∫–µ—Ç–∞:');
    console.log('  - connected:', socket.connected);
    console.log('  - disconnected:', socket.disconnected);
    
    if (socket.connected) {
      console.log('‚úÖ –°–æ–∫–µ—Ç —É–∂–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω');
      setIsConnected(true);
      setError(null);
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    socket.on('reconnect', (attemptNumber: number) => {
      console.log(`üîÑ useSocket: reconnect –ø–æ—Å–ª–µ ${attemptNumber} –ø–æ–ø—ã—Ç–æ–∫`);
      setIsConnected(true);
      setError(null);
    });

    socket.on('reconnect_error', (error: any) => {
      console.error('‚ùå useSocket: reconnect_error:', error);
    });

    socket.on('reconnect_failed', () => {
      console.error('‚ùå useSocket: reconnect_failed');
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    });

    // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    handlersSet.current = true;

    return () => {
      console.log('üßπ useSocket cleanup');
      
      // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
      handlersSet.current = false;
      
      socket.off('connect', onConnect);
      socket.off('disconnect', onDisconnect);
      socket.off('connect_error', onConnectError);
      socket.off('reconnect');
      socket.off('reconnect_attempt');
      socket.off('reconnect_error');
      socket.off('reconnect_failed');
    };
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  const emit = useCallback((event: string, data?: any) => {
    console.log(`üì§ useSocket.emit: ${event}`, data);
    socketService.emit(event, data);
  }, []);

  const on = useCallback((event: string, callback: (data: any) => void) => {
    console.log(`üëÇ useSocket.on: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${event}`);
    socketService.on(event, callback);
  }, []);

  const off = useCallback((event: string, callback?: (data: any) => void) => {
    console.log(`üëã useSocket.off: –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç ${event}`);
    socketService.off(event, callback);
  }, []);

  // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    console.log('üìä useSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:');
    console.log('  - isConnected:', isConnected);
    console.log('  - error:', error);
  }, [isConnected, error]);

  return {
    isConnected,
    error,
    emit,
    on,
    off
  };
};