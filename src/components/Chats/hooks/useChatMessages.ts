import { useState, useEffect, useCallback, useRef } from 'react';
import { useSocket } from './useSocket';
import { Store } from '../../Store';

export interface ChatMessage {
  id: string;
  chat_id: string;
  sender_id: string;
  sender_name: string;
  message_text: string;
  sent_at: string;
  message_type: number;
  is_deleted: boolean;
  is_own: boolean;
}

export interface UseChatMessagesProps {
  chatId: string;
}

export interface UseChatMessagesReturn {
  messages: ChatMessage[];
  sendingMessage: boolean;
  hasMoreMessages: boolean;
  messagesError: string | null;
  sendMessage: (text: string) => Promise<void>;
  loadMoreMessages: () => void;
  loadMessages: () => void;
  clearMessagesError: () => void;
}

export const useChatMessages = ({ chatId }: UseChatMessagesProps): UseChatMessagesReturn => {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [sendingMessage, setSendingMessage] = useState(false);
  const [hasMoreMessages, setHasMoreMessages] = useState(true);
  const [messagesError, setMessagesError] = useState<string | null>(null);
  const [loadingMessages, setLoadingMessages] = useState(false);
  
  const { isConnected, emit, on, off } = useSocket();
  
  // Refs –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
  const messagesRef = useRef<ChatMessage[]>([]);
  const pageRef = useRef(1);
  const loadedRef = useRef(false);
  const currentChatId = useRef<string>('');
  const requestInProgress = useRef(false);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    messagesRef.current = messages;
  }, [messages]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  const loadMessages = useCallback(async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    if (!chatId || 
        !isConnected || 
        loadingMessages || 
        requestInProgress.current ||
        currentChatId.current === chatId && loadedRef.current) {
      console.log('üì• –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π:', {
        chatId,
        isConnected,
        loadingMessages,
        requestInProgress: requestInProgress.current,
        alreadyLoaded: currentChatId.current === chatId && loadedRef.current
      });
      return;
    }
    
    try {
      setLoadingMessages(true);
      setMessagesError(null);
      requestInProgress.current = true;
      
      console.log(`üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
      
      emit('get_messages', {
        chat_id: chatId,
        user_id:  Store.getState().login.userId,
        limit: 50,
        offset: 0
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      setMessagesError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
      setLoadingMessages(false);
      requestInProgress.current = false;
    }
  }, [chatId, isConnected, loadingMessages, emit]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket
  const loadMoreMessages = useCallback(async () => {
    if (!chatId || 
        !hasMoreMessages || 
        loadingMessages || 
        !isConnected ||
        requestInProgress.current) return;
    
    try {
      setLoadingMessages(true);
      requestInProgress.current = true;
      
      const offset = messagesRef.current.length;
      
      console.log(`üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ ${chatId}, offset: ${offset}`);
      
      emit('get_messages', {
        chat_id: chatId,
        limit: 50,
        offset: offset
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      setMessagesError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
      setLoadingMessages(false);
      requestInProgress.current = false;
    }
  }, [chatId, hasMoreMessages, loadingMessages, isConnected, emit]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = useCallback(async (text: string) => {
    if (!text.trim() || !chatId || sendingMessage || !isConnected) return;
    
    try {
      setSendingMessage(true);
      setMessagesError(null);
      
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}`);
      
      emit('send_message', {
        chat_id:        chatId,
        user_id:        Store.getState().userId,
        message_text:   text.trim(),
        message_type: 1
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      setMessagesError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      setSendingMessage(false);
    }
  }, [chatId, sendingMessage, isConnected, emit]);

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
  const clearMessagesError = useCallback(() => {
    setMessagesError(null);
  }, []);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞
  useEffect(() => {
    if (currentChatId.current !== chatId) {
      console.log(`üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞: ${chatId}`);
      
      currentChatId.current = chatId;
      
      setMessages([]);
      setMessagesError(null);
      setHasMoreMessages(true);
      setSendingMessage(false);
      setLoadingMessages(false);
      
      pageRef.current = 1;
      loadedRef.current = false;
      requestInProgress.current = false;
    }
  }, [chatId]);

  // WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  useEffect(() => {
    // –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    const onMessagesHistory = (data: { 
      chat_id: string; 
      messages: ChatMessage[]; 
      has_more: boolean;
    }) => {
      if (data.chat_id === chatId) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ ${data.chat_id}:`, data.messages.length);
        console.log()
        if (loadedRef.current) {
          // –≠—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ)
          setMessages(prev => [...data.messages, ...prev]);
        } else {
          // –≠—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ)
          setMessages(data.messages || []);
          loadedRef.current = true;
        }
        
        setHasMoreMessages(data.has_more || false);
        setLoadingMessages(false);
        requestInProgress.current = false;
      }
    };

    // –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const onNewMessage = (data: ChatMessage) => {
      if (data.chat_id === chatId) {
        console.log(`üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ ${chatId}`);
        setMessages(prev => [...prev, data]);
      }
    };

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const onMessageSent = (data: { success: boolean; message_id?: string }) => {
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:`, data);
      setSendingMessage(false);
      if (!data.success) {
        setMessagesError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
    };

    // –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    const onMessagesError = (data: { error: string }) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:`, data.error);
      setMessagesError(data.error);
      setLoadingMessages(false);
      setSendingMessage(false);
      requestInProgress.current = false;
    };

    // –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const onMessageError = (data: { error: string }) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`, data.error);
      setSendingMessage(false);
      setMessagesError(data.error);
    };

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    on('messages_history', onMessagesHistory);
    on('new_message', onNewMessage);
    on('message_sent', onMessageSent);
    on('messages_error', onMessagesError);
    on('message_error', onMessageError);

    return () => {
      off('messages_history', onMessagesHistory);
      off('new_message', onNewMessage);
      off('message_sent', onMessageSent);
      off('messages_error', onMessagesError);
      off('message_error', onMessageError);
    };
  }, [chatId, on, off]); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  return {
    messages,
    sendingMessage,
    hasMoreMessages,
    messagesError,
    sendMessage,
    loadMoreMessages,
    loadMessages,
    clearMessagesError
  };
};